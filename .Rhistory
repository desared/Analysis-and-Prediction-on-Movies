dim(final.training)
final.testing <- testing[,-noInterestVars]
dim(final.testing)
anyNA <- function(row){ any(is.na(row))}          # function to return which row has at least a NA
rowsWithNA <- apply(movies, 1, anyNA)           # apply the function to each row
sum(rowsWithNA)
movies <- movies[!rowsWithNA,]
responseCols <- c(13)
noInterestVars <- c(1,15,16,17,18,25:32)
set.seed(333)
inTrain <- createDataPartition(y=movies$imdb_rating,
p=0.8, list=FALSE)
training <- movies[inTrain,-noInterestVars]
testing <- movies[-inTrain,-noInterestVars]
dim(training); dim(testing)
nzv <- nearZeroVar(training, saveMetrics = TRUE)
nzv
View(training)
modFit <- train(imdb_rating ~ ., data = training, method = "lm")
summary(modFit)
model.raw <- lm(imdb_rating ~ .,
data = final.training)
summary(model.raw)
model.raw <- lm(imdb_rating ~ .,
data = training)
summary(model.raw)
modFit <- train(imdb_rating ~ ., data = training, method = "lm")
summary(modFit)
model.raw <- lm(imdb_rating ~ .,
data = training)
summary(model.raw)
modFit <- train(imdb_rating ~ title_type + genre + runtime + mpaa_rating + studio  + dvd_rel_month + imdb_num_votes +  best_pic_win  + best_dir_win +
thtr_rel_year + thtr_rel_month + dvd_rel_year + best_pic_nom  ,
data = training, method = "lm")
finMod <- modFit$finalModel
summary(finMod)
print(modFit)
pred <- predict(modFit, testing)
qplot(imdb_rating, pred, data=testing)
setwd("C:/RWTH/ws16/Data Visualisation and Analytics/Final Project")
require(pacman)
p_load( ggplot2, dplyr,statsr,grid,gridExtra, knitr, corrplot, corrr, ggthemes, plotly ,data.table, formattable , DT, glmnet, caret, leaps)
load("movies.Rdata")
dim(movies)
str(movies)
anyNA <- function(row){ any(is.na(row))}          # function to return which row has at least a NA
rowsWithNA <- apply(movies, 1, anyNA)           # apply the function to each row
sum(rowsWithNA)
movies <- movies[!rowsWithNA,]
responseCols <- c(13)
noInterestVars <- c(1,15,16,17,18,25:32)
set.seed(333)
inTrain <- createDataPartition(y=movies$imdb_rating,
p=0.8, list=FALSE)
training <- movies[inTrain,-noInterestVars]
testing <- movies[-inTrain,-noInterestVars]
dim(training); dim(testing)
modFitAll <- lm(imdb_rating ~ .,
data = training)
pred <- predict(modFitAll, testing)
modFit
modFitAll
summary(modFitAll)
pred <- predict(modFitAll, testing)
modFitAll<- na.omit(modFitAll)
pred <- predict(modFitAll, testing)
summary(modFitAll)
summary(modFitAll)$coef
pred <- predict(modFit, testing)
qplot(imdb_rating, pred, data=testing)
pred <- predict(modFitAll, testing)
modFitAll <- train(imdb_rating ~ .,
data = training, method = "lm")
pred <- predict(modFitAll, testing)
qplot(imdb_rating, pred, data=testing)
pred <- predict(modFitAll, testing)
qplot(imdb_rating, pred, colour = genre,  data=testing)
pred <- predict(modFitAll, testing)
qplot(imdb_rating, pred, colour = mpaa_rating,  data=testing)
modFit <- train(imdb_rating ~ genre + title_type + imdb_num_votes + runtime + studio + mpaa_rating + dvd_rel_month,        data = training, method = "lm")
pred <- predict(modFit, testing)
qplot(imdb_rating, pred, colour = mpaa_rating,  data=testing)
pred <- predict(modFit, testing)
qplot(imdb_rating, pred, colour = c(mpaa_rating,genre),  data=testing)
modFit <- train(imdb_rating ~ genre + title_type + imdb_num_votes + runtime +  mpaa_rating + dvd_rel_month,        data = training, method = "lm")
modFitAll <- train(imdb_rating ~ .,
data = training, method = "lm")
modFitAll <- lm(imdb_rating ~ .,
data = training)
pred <- predict(modFitAll, testing)
class(modFit)
class(modFitAll)
?model.frame
model.frame(modFit)
names(movies)
modFit <- train(imdb_rating ~ genre + title_type + imdb_num_votes + runtime + studio + mpaa_rating + dvd_rel_month,        data = final.training, method = "lm")
modFit <- train(imdb_rating ~ genre + title_type + imdb_num_votes + runtime + studio + mpaa_rating + dvd_rel_month,        data = training, method = "glm")
pred <- predict(modFit, testing)
qplot(imdb_rating, pred, colour = mpaa_rating,  data=testing)
modFit <- train(imdb_rating ~ genre + title_type + imdb_num_votes + runtime ,        data = training, method = "lm")
pred <- predict(modFit, testing)
qplot(imdb_rating, pred, colour = mpaa_rating,  data=testing)
modFit <- train(imdb_rating ~ genre + title_type + imdb_num_votes + runtime + studio + mpaa_rating ,        data = training, method = "lm")
?train
modFit <- train(imdb_rating ~ genre + title_type + imdb_num_votes + runtime + studio + mpaa_rating + dvd_rel_month,        data = training, method = "lasso")
modFit <- train(imdb_rating ~ genre + title_type + imdb_num_votes + runtime + studio + mpaa_rating + dvd_rel_month,        data = training, method = "lasso")
setwd("C:/RWTH/ws16/Data Visualisation and Analytics/Final Project")
require(pacman)
p_load( ggplot2, dplyr,statsr,grid,gridExtra, knitr, corrplot, corrr, ggthemes, plotly ,data.table, formattable , DT, glmnet, caret, leaps)
load("movies.Rdata")
dim(movies)
str(movies)
anyNA <- function(row){ any(is.na(row))}          # function to return which row has at least a NA
rowsWithNA <- apply(movies, 1, anyNA)           # apply the function to each row
sum(rowsWithNA)
movies <- movies[!rowsWithNA,]
#rowsWithNAIndexTRUE <- which(rowsWithNA == TRUE)  # get which row return TRUE
# sample testing data
testingIndex <- sample(nrow(movies),floor(nrow(movies) * 0.2),replace = FALSE)
# get test and training data
testing  <- movies[testingIndex,]
training <- movies[-testingIndex,]
# response variables of interest:
# imdb_rating
# remove response cols, title, studio, actors and url's columns
responseCols <- c(13)
noInterestVars <- c(1,15,16,17,18,25:32)
trainingPredictors <- training[,-c(responseCols,noInterestVars)]
trainingResponse   <- training[, responseCols]
testingPredictors <- testing[,-c(responseCols,noInterestVars)]
testingResponse   <- testing[, responseCols]
final.training <- training[,-noInterestVars]
dim(final.training)
final.testing <- testing[,-noInterestVars]
dim(final.testing)
model.raw <- lm(imdb_rating ~ .,
data = final.training)
summary(model.raw)
nzv <- nearZeroVar(final.training, saveMetrics= TRUE)
nzvIndices <- which(nzv$nzv == TRUE)
nzv[nzvIndices, ]
for(i in 1:3){
cat('Distribution of:', names(training)[nzvIndices[i]])
print(table(movies[,nzvIndices[i]]))
plot1 <- ggplot(training, aes_string(x = names(training)[nzvIndices[i]], y = names(training)[responseCols[1]], colour = names(training)[responseCols[1]])) + geom_point()
plot2 <- ggplot(training, aes_string(x = names(training)[nzvIndices[i]], fill = names(training)[responseCols[2]])) + geom_bar(position = 'fill')
plot3 <- ggplot(training, aes_string(x = names(training)[nzvIndices[i]], y = names(training)[responseCols[3]], colour = names(training)[responseCols[3]])) + geom_point()
grid.arrange(plot1, plot2, plot3, ncol=3)
cat('\n')
}
for(i in 1:3){
cat('Distribution of:', names(final.training)[nzvIndices[i]])
print(table(movies[,nzvIndices[i]]))
plot1 <- ggplot(final.training, aes_string(x = names(final.training)[nzvIndices[i]], y = names(final.training)[responseCols[1]], colour = names(final.training)[responseCols[1]])) + geom_point()
plot2 <- ggplot(final.training, aes_string(x = names(final.training)[nzvIndices[i]], fill = names(final.training)[responseCols[2]])) + geom_bar(position = 'fill')
plot3 <- ggplot(final.training, aes_string(x = names(final.training)[nzvIndices[i]], y = names(final.training)[responseCols[3]], colour = names(final.training)[responseCols[3]])) + geom_point()
grid.arrange(plot1, plot2, plot3, ncol=3)
cat('\n')
}
for(i in 1:3){
cat('Distribution of:', names(final.training)[nzvIndices[i]])
print(table(movies[,nzvIndices[i]]))
plot1 <- ggplot(final.training, aes_string(x = names(final.training)[nzvIndices[i]], y = names(final.training)[responseCols[1]], colour = names(final.training)[responseCols[1]])) + geom_point()
plot2 <- ggplot(final.training, aes_string(x = names(final.training)[nzvIndices[i]], fill = names(final.training)[responseCols[2]])) + geom_bar(position = 'fill')
plot3 <- ggplot(final.training, aes_string(x = names(final.training)[nzvIndices[i]], y = names(final.training)[responseCols[3]], colour = names(final.training)[responseCols[3]])) + geom_point()
grid.arrange(plot1, plot2, plot3, ncol=3)
cat('\n')
}
numericIndices <- sapply(medianImputTrainingData, is.numeric) # extract which columns are numeric
numericIndices <- sapply(final.training, is.numeric) # extract which columns are numeric
colsCorr <- cor(final.training[,numericIndices])     # filter out non numeric columns
colsCorr                                                      # evaluate results
# recurrent evaluation using this section
# predicted values for the training dataset
testePredict <- predict(model.raw,final.training)
# plot expected versus predicted values
plot(abs(final.training$imdb_rating - model.raw))
# recurrent evaluation using this section
# predicted values for the training dataset
testePredict <- predict(model.raw,final.training)
# plot expected versus predicted values
plot(abs(final.training$imdb_rating - testePredict))
# plot attributes distribution versus predicted values
#for(i in 1:ncol(medianImputTrainingPredictors)){
#  title <- sprintf('%s', names(medianImputTrainingPredictors)[i])
#  plot(medianImputTrainingPredictors[,i],medianImputTrainingPredictors$imdb_rating,main = #title)
#}
# recurrent evaluation using this section
# predicted values for the training dataset
testePredict <- predict(model.raw,final.training)
# plot expected versus predicted values
plot(abs(final.training$imdb_rating - testePredict))
# plot attributes distribution versus predicted values
for(i in 1:ncol(final.training)){
title <- sprintf('%s', names(final.training)[i])
plot(final.training[,i],final.training$imdb_rating,main = "title")
}
# recurrent evaluation using this section
# predicted values for the training dataset
testePredict <- predict(model.raw,final.training)
# plot expected versus predicted values
plot(abs(final.training$imdb_rating - testePredict))
# plot attributes distribution versus predicted values
for(i in 1:ncol(final.training)){
title <- sprintf('%s', names(final.training)[i])
plot(final.training[,i],final.training$imdb_rating,main = title)
}
# recurrent evaluation using this section
# predicted values for the training dataset
testePredict <- predict(model.raw,final.training)
# plot expected versus predicted values
plot(abs(final.training$imdb_rating - testePredict))
# plot attributes distribution versus predicted values
for(i in 1:ncol(final.training)){
title <- sprintf('%s', names(final.training)[i])
plot(final.training[,i],final.training$imdb_rating,main = #title)
}
# recurrent evaluation using this section
# predicted values for the training dataset
testePredict <- predict(model.raw,final.training)
# plot expected versus predicted values
plot(abs(final.training$imdb_rating - testePredict))
# plot attributes distribution versus predicted values
for(i in 1:ncol(final.training)){
title <- sprintf('%s', names(final.training)[i])
plot(final.training[,i],final.training$imdb_rating)
}
testePredict
moviesVarEngineer <- function(dataFrame, mode){
######### feature transformation
dataFrame$imdb_num_votes <- dataFrame$imdb_num_votes/1000
dataFrame$runtime <- dataFrame$runtime/60
#########
# step 2
dataFrame$imdb_rating[dataFrame$imdb_rating < 5] <- 5
# step 3
dataFrame$thtr_rel_year_BIN <- cut(dataFrame$thtr_rel_year, breaks = c(1969, 1980, 1990,2000,2010, 2014))
dataFrame$thtr_rel_year <- NULL
# step 4 = weights - outside of the function
# step 5 = best actress removal and horror genre category removal
dataFrame$genre[dataFrame$genre == 'Horror'] <- 'Other'
dataFrame$genre <- factor(dataFrame$genre, levels = levels(dataFrame$genre)[c(1:6,8:11)])
# step 6 = added interactions in the final model
# step 7 = selected the 5 biggest studios and transformed the others to 'other'
studios <- c('Paramount Pictures','Warner Bros. Pictures','Sony Pictures Home Entertainment','Universal Pictures','Warner Home Video')
if(mode == 'training'){
dataFrame$studio <- training$studio
}else{
dataFrame$studio <- testing$studio
}
dataFrame$studio[!dataFrame$studio %in% studios] <- NA
dataFrame$studio <- factor(dataFrame$studio, levels = c(studios,'Other'))
dataFrame$studio[is.na(dataFrame$studio)] <- 'Other'
invisible(dataFrame)
}
final.training <- moviesVarEngineer(final.training,'training')
weight <- rep(NA,nrow(final.training))
weight[final.training$best_pic_nom == 'yes'] <- 1000
weight[final.training$best_pic_win == 'yes'] <- 1000
weight[final.training$best_dir_win == 'yes'] <- 1000
weight[is.na(weight)] <- 1
final.model <- lm(imdb_rating ~ title_type + genre + runtime +
mpaa_rating  + imdb_num_votes +
best_pic_nom + thtr_rel_year_BIN + best_pic_win +
best_dir_win + studio + genre:thtr_rel_year_BIN +
thtr_rel_year_BIN:best_pic_win + thtr_rel_year_BIN:best_actress_win +
thtr_rel_year_BIN:best_dir_win,
data = final.training,
weights = weight)
summary(final.model)
anova(final.model)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/RWTH/ws16/Data Visualisation and Analytics/Final Project")
require(pacman)
p_load( ggplot2, dplyr,statsr,grid,gridExtra, knitr, corrplot, corrr, ggthemes, plotly ,data.table, formattable , DT, glmnet, caret, leaps)
load("movies.Rdata")
dim(movies)
str(movies)
anyNA <- function(row){ any(is.na(row))}          # function to return which row has at least a NA
rowsWithNA <- apply(movies, 1, anyNA)           # apply the function to each row
sum(rowsWithNA)
movies <- movies[!rowsWithNA,]
responseCols <- c(13)
noInterestVars <- c(1,15,16,17,18,25:32)
set.seed(333)
inTrain <- createDataPartition(y=movies$imdb_rating,
p=0.8, list=FALSE)
training <- movies[inTrain,-noInterestVars]
testing <- movies[-inTrain,-noInterestVars]
dim(training); dim(testing)
modFitAll <- lm(imdb_rating ~ .,
data = training)
summary(modFitAll)$coef
summary(modFitAll)
step(lm(imdb_rating~ . , data = training), direction = "backward")
final.model <- lm(formula = imdb_rating ~ title_type + genre + runtime + mpaa_rating +
thtr_rel_year + dvd_rel_month + imdb_num_votes + best_pic_nom +
best_pic_win + best_dir_win, data = training)
summary(final.model)
pred <- predict(final.model, testing)
qplot(imdb_rating, pred, colour = imdb_num_votes,  data=testing)
step(lm(imdb_rating~ genre + title_type + imdb_num_votes + runtime + studio + mpaa_rating + dvd_rel_month , data = training), direction = "both")
lm(formula = imdb_rating ~ genre + title_type + imdb_num_votes +
runtime + mpaa_rating + dvd_rel_month, data = training)
summary(lm(formula = imdb_rating ~ genre + title_type + imdb_num_votes +
runtime + mpaa_rating + dvd_rel_month, data = training))
step(lm(imdb_rating~ . , data = training), direction = "backward", k = log(n))
step(lm(imdb_rating~ . , data = training), direction = "backward", k = log(nrow(training)))
final.model <- lm(formula = imdb_rating ~ title_type + genre + thtr_rel_year +
imdb_num_votes, data = training)
summary(final.model)
step(lm(imdb_rating~ genre , data = training), direction = "forward")
step(lm(imdb_rating~ 1 , data = training), direction = "forward")
step(lm(imdb_rating~ 1 , data = training), direction = "forward", scope =  . )
step(lm(imdb_rating~ 1 , data = training), direction = "forward", scope = genre + title_type + imdb_num_votes + runtime + studio + mpaa_rating + dvd_rel_month )
step(lm(imdb_rating~ 1 , data = training), direction = "forward", scope =~ genre + title_type + imdb_num_votes + runtime + studio + mpaa_rating + dvd_rel_month )
final.model <- lm(formula = imdb_rating ~ genre + imdb_num_votes + mpaa_rating +
runtime + title_type + dvd_rel_month, data = training)
summary(final.model)
anova(final.model)
final.model <- lm(formula = imdb_rating ~ genre + imdb_num_votes + mpaa_rating +
runtime + title_type , data = training)
summary(final.model)
step(lm(imdb_rating~ . , data = training), direction = "backward")
final.model <- lm(formula = imdb_rating ~ title_type + genre + runtime + mpaa_rating +
thtr_rel_year + dvd_rel_month + imdb_num_votes + best_pic_nom +
best_pic_win + best_dir_win, data = training)
summary(final.model)
pred <- predict(final.model, testing)
qplot(imdb_rating, pred, colour = imdb_num_votes,  data=testing)
fit1 <- lm(imdb_rating ~ imdb_num_votes, data = modFitAll)
fit1 <- lm(imdb_rating ~ imdb_num_votes, data = final.model)
fit1 <- lm(imdb_rating ~ imdb_num_votes, data = training)
fit2 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year)
fit3 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type)
fit4 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win)
fit5 <- update(modFitAll, genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win + runtime)
fit1 <- lm(imdb_rating ~ imdb_num_votes, data = training)
fit2 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year)
fit3 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type)
fit4 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win)
fit5 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win + runtime)
fit6 <- update(model.raw, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win + runtime + dvd_rel_month + best_dir_win)
fit1 <- lm(imdb_rating ~ imdb_num_votes, data = training)
fit2 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year)
fit3 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type)
fit4 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win)
fit5 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win + runtime)
fit6 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win + runtime + dvd_rel_month + best_dir_win)
anova(fit1, fit2, fit3, fit4, fit5,fit6)
fit1 <- lm(imdb_rating ~ imdb_num_votes, data = training)
fit2 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year)
fit3 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type)
fit4 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win)
fit5 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win + runtime)
fit6 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win + runtime +  best_dir_win)
anova(fit1, fit2, fit3, fit4, fit5,fit6)
fit1 <- lm(imdb_rating ~ imdb_num_votes, data = training)
fit2 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year)
fit3 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type)
fit4 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win)
fit5 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win + runtime)
fit6 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + title_type + mpaa_rating + best_pic_win + runtime + dvd_rel_month )
anova(fit1, fit2, fit3, fit4, fit5,fit6)
final.model <- lm(formula = imdb_rating ~ title_type + genre + runtime + mpaa_rating +
thtr_rel_year + dvd_rel_month + imdb_num_votes + best_pic_nom +
best_pic_win + best_dir_win, data = training)
summary(final.model)
setwd("C:/RWTH/ws16/Data Visualisation and Analytics/Final Project")
require(pacman)
p_load( ggplot2, dplyr,statsr,grid,gridExtra, knitr, corrplot, corrr, ggthemes, plotly ,data.table, formattable , DT, glmnet, caret, leaps )
load("movies.Rdata")
dim(movies)
str(movies)
set.seed(123)
anyNA <- function(row){ any(is.na(row))}      # function to return which row has at least a NA
rowsWithNA <- apply(movies, 1, anyNA)         # apply the function to each row
sum(rowsWithNA)
movies <- movies[!rowsWithNA,]
responseCols <- c(13)                         #imdb rating is dependent variable
noInterestVars <- c(1,15,16,17,18,25:32)      # remove title, critics_rating,critics_score,audience_rating,audience_score, the name of directors and actors and the url of imdb and rotten tomatos
inTrain <- createDataPartition(y=movies$imdb_rating,p=0.6, list=FALSE)
training <- movies[inTrain,-noInterestVars]         # create training set
testing <- movies[-inTrain,-noInterestVars]         # create testing set
dim(training); dim(testing)
set.seed(123)
modFitAll <- lm(imdb_rating ~ .,
data = training)
summary(modFitAll)
step(lm(imdb_rating~ . , data = training), direction = "backward")
set.seed(123)
### final model with what we got implementing AIC
final.model <- lm(formula = imdb_rating ~ title_type + genre + runtime + mpaa_rating +
thtr_rel_year + dvd_rel_month + imdb_num_votes + best_pic_nom +
best_pic_win + best_dir_win, data = training)
summary(final.model)
set.seed(123)
#comparing models using Anova
fit1 <- lm(imdb_rating ~ imdb_num_votes, data = training)
fit2 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes)
fit3 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year)
fit4 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom)
fit5 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + best_pic_win + title_type)
fit6 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + best_pic_win + title_type + dvd_rel_month + runtime )
fit7 <- update(modFitAll, imdb_rating ~ genre + imdb_num_votes + thtr_rel_year + best_pic_nom + best_pic_win + title_type + dvd_rel_month + runtime + best_dir_win)
anova(fit1, fit2, fit3, fit4, fit5,fit6, fit7)
# Use the final model to generate rating predictions four movies.
set.seed(123)
dataTheDish <- data.frame(title_type ="Feature Film" ,genre="Drama", runtime=101, mpaa_rating="PG-13", dvd_rel_month= 8, best_pic_win="no", best_pic_nom="no", thtr_rel_year=2013, imdb_num_votes=122850,best_dir_win="no")
predTheDish <- predict(final.model, dataTheDish, interval="predict" )
dataFillyBrown <- data.frame(title_type ="Feature Film" ,genre="Drama", runtime=80, mpaa_rating="R", dvd_rel_month= 7, best_pic_win="no", best_pic_nom="no", thtr_rel_year=2001,  imdb_num_votes=899,best_dir_win="no")
predFillyBrown <- predict(final.model, dataFillyBrown, interval="predict")
dataAroundTheWorld <- data.frame(title_type ="Feature Film" ,genre="Action & Adventure", runtime=120, mpaa_rating="PG", best_pic_win="no", best_pic_nom="no",thtr_rel_year=2004, dvd_rel_month=11, imdb_num_votes=66054,best_dir_win="no")
predAroundTheWorld <- predict(final.model, dataAroundTheWorld, interval="predict")
dataHungerGames <- data.frame(title_type ="Feature Film" ,genre="Drama", runtime=142, mpaa_rating="PG-13",dvd_rel_month= 8, best_pic_win="no", best_pic_nom="no", thtr_rel_year=2012,  imdb_num_votes=675907,best_dir_win="no")
predHungerGames <- predict(final.model, dataHungerGames, interval="predict")
# Show prediction results.
df <- data.frame(t=c("The Dish","Filly Brown","Around the World in 80 Days", "The Hunger Games"),
p=c(sprintf("%2.1f", predTheDish[1]),
sprintf("%2.1f", predFillyBrown[1]),
sprintf("%2.1f", predAroundTheWorld[1]),
sprintf("%2.1f", predHungerGames[1])),
i=c(sprintf("%2.1f - %2.1f", predTheDish[2], ifelse(predTheDish[3]>10, 10 ,predTheDish[3] )),
sprintf("%2.1f - %2.1f", predFillyBrown[2], ifelse(predFillyBrown[3]>10, 10 ,predFillyBrown[3] )),
sprintf("%2.1f - %2.1f", predAroundTheWorld[2], ifelse(predAroundTheWorld[3]>10, 10 ,predAroundTheWorld[3] )),
sprintf("%2.1f - %2.1f", predHungerGames[2], ifelse(predHungerGames[3]>10, 10 ,predHungerGames[3] ))),
r=c("7.3", "5.5", "5.8", "7.3"))
kable(df, col.names=c("Movie Title", "Predicted Rating", "95% Prediction Interval", "Actual Rating"))
set.seed(123)
mod.testing <-step(lm(imdb_rating~ . , data = testing), direction = "backward")
summary(mod.testing)
set.seed(123)
pred <- predict(final.model, testing)
qplot(imdb_rating, pred,  data=testing)
set.seed(123)
nzv <- nearZeroVar(training, saveMetrics = TRUE)
nzvIndices <- which(nzv$nzv == TRUE)
nzv[nzvIndices, ]
set.seed(123)
# Correlation between numeric values
correlation <- cor(training[sapply(training, is.numeric)])
corrplot(correlation, order = "hclust", method = "ellipse", addCoef.col = "black")                                                   # evaluate results
set.seed(123)
removeVar <- c(8,11, 14,15,19)             # remove thtr_rel_day, dvd_rel_day, best_pic_nom,
# best_pic_win, top200_box
trainingMod <- training[,-removeVar]         # create training set
testingMod <- testing[,-removeVar]           # create testing set
dim(trainingMod); dim(testingMod)
set.seed(123)
moviesVarEngineer <- function(dataFrame, mode){
# step 1 = Transformation of imdb_ratings < 5 to 5
dataFrame$imdb_rating[dataFrame$imdb_rating < 5] <- 5
# step 2 = Theatre release year transformation
dataFrame$thtr_rel_year_BIN <- cut(dataFrame$thtr_rel_year, breaks = c(1969, 1980, 1990,2000,2010, 2014))
dataFrame$thtr_rel_year <- NULL
# step 3 = selected the  biggest studios and transformed the others to 'other'
studios <- c('Paramount Pictures','Warner Bros. Pictures','Sony Pictures Home Entertainment','Universal Pictures','Warner Home Video','Destination Films', 'Fox SearchLight', 'Box Films', '20th Century Fox', 'Summit Entertainment' , 'Pictures Classic')
if(mode == 'training'){
dataFrame$studio <- trainingMod$studio
}else{
dataFrame$studio <- testingMod$studio
}
dataFrame$studio[!dataFrame$studio %in% studios] <- NA
dataFrame$studio <- factor(dataFrame$studio, levels = c(studios,'Other'))
dataFrame$studio[is.na(dataFrame$studio)] <- 'Other'
invisible(dataFrame)
}
set.seed(123)
TrainingPredictors <- moviesVarEngineer(trainingMod,'training')
TestingPredictors <- moviesVarEngineer(testingMod,'testing')
weight <- rep(NA,nrow(TrainingPredictors))
weight[TrainingPredictors$best_actress_win == 'yes'] <- 10
weight[TrainingPredictors$best_actor_win == 'yes'] <- 10
weight[TrainingPredictors$best_dir_win == 'yes'] <- 10
weight[is.na(weight)] <- 1
finalModEng <- lm(imdb_rating ~ . , data = TrainingPredictors, weights = weight )
summary(finalModEng)
anova(finalModEng)
set.seed(123)
testingPredictions  <- predict(finalModEng, TestingPredictors)
trainingPredictions  <- predict(finalModEng, TrainingPredictors)
qplot(imdb_rating, testingPredictions,  data=TestingPredictors)
postResample(pred=testingPredictions ,obs=TestingPredictors$imdb_rating)[1]
postResample(pred=trainingPredictions ,obs=TrainingPredictors$imdb_rating)[1]
set.seed(123)
# Use the final model to generate rating predictions four movies.
dataTheDish <- data.frame(title_type ="Feature Film" ,genre="Drama", runtime=101, mpaa_rating="PG-13",studio= "Warner Bros. Pictures",thtr_rel_month=3, dvd_rel_month= 8, best_actor_win="no", best_actress_win="no", thtr_rel_year_BIN='(2000,2010]', imdb_num_votes=122850,best_dir_win="no",thtr_rel_month=3,dvd_rel_year=2013)
predTheDish <- predict(finalModEng, dataTheDish, interval="predict" , weights = 1)
dataFillyBrown <- data.frame(title_type ="Feature Film" ,genre="Drama", runtime=80, mpaa_rating="R",studio= "Other", thtr_rel_month=4, dvd_rel_month= 7, best_actor_win="no", best_actress_win="no", thtr_rel_year_BIN='(2010,2014]',  imdb_num_votes=899,best_dir_win="no",thtr_rel_month=4,dvd_rel_year=2001)
predFillyBrown <- predict(finalModEng, dataFillyBrown, interval="predict", weights = 1)
dataAroundTheWorld <- data.frame(title_type ="Feature Film" ,genre="Action & Adventure", runtime=120, mpaa_rating="PG",studio= "Other", thtr_rel_month=6, dvd_rel_month= 11, best_actor_win="no", best_actress_win="no",thtr_rel_year_BIN='(2000,2010]',  imdb_num_votes=66054,best_dir_win="no",thtr_rel_month=6,dvd_rel_year=2004)
predAroundTheWorld <- predict(finalModEng, dataAroundTheWorld, interval="predict", weights = 1)
dataHungerGames <- data.frame(title_type ="Feature Film" ,genre="Drama", runtime=142, mpaa_rating="PG-13",studio= "Other", thtr_rel_month=3, dvd_rel_month= 8, best_actor_win="no", best_actress_win="yes", thtr_rel_year_BIN='(2010,2014]',  imdb_num_votes=675907,best_dir_win="no",thtr_rel_month=3,dvd_rel_year=2012)
predHungerGames <- predict(finalModEng, dataHungerGames, interval="predict", weights = 10)
# Show prediction results.
df <- data.frame(t=c("The Dish","Filly Brown","Around the World in 80 Days", "The Hunger Games"),
p=c(sprintf("%2.1f", predTheDish[1]),
sprintf("%2.1f", predFillyBrown[1]),
sprintf("%2.1f", predAroundTheWorld[1]),
sprintf("%2.1f", predHungerGames[1])),
i=c(sprintf("%2.1f - %2.1f", predTheDish[2], predTheDish[3]),
sprintf("%2.1f - %2.1f", predFillyBrown[2], predFillyBrown[3]),
sprintf("%2.1f - %2.1f", predAroundTheWorld[2], predAroundTheWorld[3]),
sprintf("%2.1f - %2.1f", predHungerGames[2], predHungerGames[3])),
r=c("7.3", "5.5", "5.8", "7.3"))
kable(df, col.names=c("Movie Title", "Predicted Rating", "95% Prediction Interval", "Actual Rating"))
?postResample
predicted <-  matrix(rnorm(50), ncol = 5)
predicted
observed <- rnorm(10)
observed
apply(predicted, 2, postResample, obs = observed)
